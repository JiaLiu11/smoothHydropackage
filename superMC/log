diff --git a/EBE-Node/superMC/GNUmakefile b/EBE-Node/superMC/GNUmakefile
old mode 100644
new mode 100755
index 6b4ccfc..69d0d4e
--- a/EBE-Node/superMC/GNUmakefile
+++ b/EBE-Node/superMC/GNUmakefile
@@ -11,7 +11,7 @@
 ##  
 
 CC := $(shell ../crank/configure_compiler_C++.sh)
-CFLAGS= $(shell ../crank/configure_compiler_C++_Flags.sh) $(shell gsl-config --cflags)
+CFLAGS= $(shell ../crank/configure_compiler_C++_Flags.sh)
 
 RM		=	rm -f
 O               =       .o
@@ -68,7 +68,7 @@ mkobjdir:
 		-@mkdir -p $(OBJDIR)
 
 $(TARGET):	$(OBJECTS)	
-		$(CC) $(OBJECTS) -o $(TARGET) $(LDFLAGS) 
+		$(CC) $(LDFLAGS) $(OBJECTS) -o $(TARGET)
 #		strip $(TARGET)
 
 clean:		
diff --git a/EBE-Node/superMC/GaussianNucleonsCal.cpp b/EBE-Node/superMC/GaussianNucleonsCal.cpp
index 35eaa56..5a9bba0 100644
--- a/EBE-Node/superMC/GaussianNucleonsCal.cpp
+++ b/EBE-Node/superMC/GaussianNucleonsCal.cpp
@@ -54,7 +54,7 @@ bool GaussianNucleonsCal::testCollision(double b)
 // Simulate if there is a collision at impact parameter b. The size of
 // nucleons are read from those public variables.
 {
-  if (drand48() < 1.-exp( -sigma_gg*exp(-b*b/(2.*width*width))/(2*M_PI*width*width) ))
+  if (drand48() < 1.-exp( -sigma_gg*exp(-b*b/(2.*width*width))/(2.*M_PI*width*width) ))
     return true;
   else
     return false;
diff --git a/EBE-Node/superMC/KLNModel.cpp b/EBE-Node/superMC/KLNModel.cpp
index b79d7d0..a2ddbd3 100644
--- a/EBE-Node/superMC/KLNModel.cpp
+++ b/EBE-Node/superMC/KLNModel.cpp
@@ -94,7 +94,7 @@ double KLNModel::getJacobian(double eta, double pt2)
 // calculates dNdy or dNdyd2pt for AB collision at rapidity y for proj/targ
 // thickness given by npart1, npart2
 // this routine is used on the MC sampled nucleon configurations
-double KLNModel::getdNdy(double y, double npart1, double npart2, double pt, int pt_order)
+double KLNModel::getdNdy(double y, double npart1, double npart2, double pt, int pt_order, int pt_order_mix)
 {
   kln_global = this;
   Npart1=npart1;
@@ -102,6 +102,7 @@ double KLNModel::getdNdy(double y, double npart1, double npart2, double pt, int
   rapidity=y;
   partonPt=pt;  // if >0 then pt is fixed, no integration
   PT_order=pt_order;
+  PT_order_mix = pt_order_mix;
   double trEtaY=1.0;
   double result=0.0;
   // MC integration over kt, pt, phi using bases()
@@ -258,10 +259,16 @@ double KLNModel::func(double* x)
   double result = alp*fnc; //alpha_s*phi_A*phi_B
   if (partonPt < 0.0)
   {
-    if(PT_order==2)
+    if(PT_order==2 and PT_order_mix<=0)
     {
       result *= (Ptmax-Ptmin)*pt*pt; // pt^2 dpt for Tmn lookup table and fast free-streaming & matching calculation
-    }    
+    } 
+    else if(PT_order==1 and PT_order_mix>0)   
+    {
+      result *= (Ptmax-Ptmin)*pt; // pt dpt for Tmn lookup table and fast free-streaming & matching calculation
+                                  // if work in PT_order_mix=1 mode, 2*M_PI should be dissmissed. 
+                                  //Since the phi integration would be done while free-streaming.
+    }       
     else
       result *= 2.0*M_PI*(Ptmax-Ptmin)*pt; // d^2pT integration
   }
diff --git a/EBE-Node/superMC/KLNModel.h b/EBE-Node/superMC/KLNModel.h
index 14864c7..8a6be3f 100644
--- a/EBE-Node/superMC/KLNModel.h
+++ b/EBE-Node/superMC/KLNModel.h
@@ -21,6 +21,7 @@ private:
   int    dEtdy;        // =1: calculate dE/dy
   double partonPt;    // produce parton with fixed pt
   int    PT_order;    //order of pt in KLN pt integration  
+  int    PT_order_mix;
   double g2hfac;      // g-->hadr conversion factor
   double alphaS;      // alpha strong for fixed coupling case
   double lambda;
@@ -34,7 +35,6 @@ private:
   double rapidity;
   double transEtaY;
 
-
  public:
   static double Nc;
   static double Nf;
@@ -47,7 +47,7 @@ private:
   KLNModel(double srt,int mode,UnintegPartonDist* f);
   virtual ~KLNModel();
 
-  double getdNdy(double y,double npart1,double npart2, double pt=-1.0, int pt_order=1);
+  double getdNdy(double y,double npart1,double npart2, double pt=-1.0, int pt_order=1, int pt_order_mix=0);
   inline double getAlphaStrong(const double q2);
 
   double SaturationScale(double x,double npart);
diff --git a/EBE-Node/superMC/MCnucl.cpp b/EBE-Node/superMC/MCnucl.cpp
index 8025197..3a9106f 100644
--- a/EBE-Node/superMC/MCnucl.cpp
+++ b/EBE-Node/superMC/MCnucl.cpp
@@ -46,13 +46,19 @@ MCnucl::MCnucl(ParameterReader* paraRdr_in)
   PTinte = paraRdr->getVal("PT_flag");
   PTmax  = paraRdr->getVal("PT_Max");
   PTmin  = paraRdr->getVal("PT_Min");
+  PT_order_mix = paraRdr->getVal("pT_order_mix");
   dpt = paraRdr->getVal("d_PT");
   MaxPT=(int)((PTmax-PTmin)/dpt+0.1)+1;
-  if(PTinte<0)
-      PT_order = paraRdr->getVal("PT_order");   
+
+  if(PTinte>0 and PT_order_mix<=0)
+      PT_order = paraRdr->getVal("PT_order");  
+  else if(PTinte>0 and PT_order_mix>0) 
+      {
+        PT_order = paraRdr->getVal("PT_order"); 
+        PT_order_app = 1;  //do pt order=1 integration along with order=2.
+      }
   else
       PT_order = 1; //does not apply when there is no PT integration
-
   //.... NN cross sections in mb
   double ecm = paraRdr->getVal("ecm");
   double sig = hadronxsec::totalXsection(200.0,0);
@@ -92,6 +98,7 @@ MCnucl::MCnucl(ParameterReader* paraRdr_in)
 
 
   dndyTable=0;    // lookup table pointers not valid yet
+  dndyTable_app=0;
   dndydptTable=0;
   overSample=1;  // default: no oversampling
   binRapidity = paraRdr->getVal("ny");
@@ -139,6 +146,14 @@ MCnucl::~MCnucl()
     delete [] dndyTable;
   }
 
+  if(dndyTable_app) {
+    for(int iy=0;iy<binRapidity;iy++) {
+      for(int j=0;j<tmax;j++) delete [] dndyTable_app[iy][j];
+      delete [] dndyTable_app[iy];
+    }
+    delete [] dndyTable_app;
+  }
+
   if(dndydptTable) {
     for (int iy=0; iy<binRapidity; iy++) {
       for (int j=0; j<tmaxPt; j++) {
@@ -490,7 +505,7 @@ void MCnucl::getTA2()
 
 // --- initializes dN/dyd2rt (or dEt/...) on 2d grid for rapidity slice iy
 //     and integrates it to obtain dN/dy (or dEt/dy) ---
-void MCnucl::setDensity(int iy, int ipt)
+void MCnucl::setDensity(int iy, int ipt, int pt_order_mix)
 {
   // which_mc_model==1 -> KLN-like
   if (which_mc_model==1 && ipt>=0 && (dndydptTable==0)) {
@@ -500,12 +515,17 @@ void MCnucl::setDensity(int iy, int ipt)
   }
 
   // which_mc_model==1 -> KLN-like
-  if (which_mc_model==1 && ipt<0 && (dndyTable==0)) {
+  if (which_mc_model==1 && ipt<0 && (dndyTable==0) && pt_order_mix<=0) {
     cout <<
      "ERROR in MCnucl::setDensity() : pt-integrated yields require dndyTable !" << endl;
     exit(0);
   }
 
+  if (which_mc_model==1 && ipt<0 && (dndyTable_app==0) && pt_order_mix>0) {
+    cout <<
+     "ERROR in MCnucl::setDensity() : pt-integrated yields require dndyTable_app with pT_order=1!" << endl;
+    exit(0);
+  }
   double tblmax=0, table_result=0;
 
   rapidity=rapMin + (rapMax-rapMin)/binRapidity*iy;
@@ -530,9 +550,18 @@ void MCnucl::setDensity(int iy, int ipt)
         int i = floor(di); int j = floor(dj);
         if (ipt<0) // without pt dependence
         {
-          table_result = sixPoint2dInterp(di-i, dj-j, // x and y value, in lattice unit (dndyTable_step -> 1)
-          dndyTable[iy][i][j], dndyTable[iy][i][j+1], dndyTable[iy][i][j+2], dndyTable[iy][i+1][j], dndyTable[iy][i+1][j+1], dndyTable[iy][i+2][j]);
-          rho->setDensity(iy,ir,jr,table_result);
+          if(pt_order_mix<=0)
+          {
+            table_result = sixPoint2dInterp(di-i, dj-j, // x and y value, in lattice unit (dndyTable_step -> 1)            
+                dndyTable[iy][i][j], dndyTable[iy][i][j+1], dndyTable[iy][i][j+2], dndyTable[iy][i+1][j], dndyTable[iy][i+1][j+1], dndyTable[iy][i+2][j]);
+            rho->setDensity(iy,ir,jr,table_result);
+          }
+          else
+          {
+            table_result = sixPoint2dInterp(di-i, dj-j, // x and y value, in lattice unit (dndyTable_step -> 1)
+                dndyTable_app[iy][i][j], dndyTable_app[iy][i][j+1], dndyTable_app[iy][i][j+2], dndyTable_app[iy][i+1][j], dndyTable_app[iy][i+1][j+1], dndyTable[iy][i+2][j]);
+            rho->setDensity(iy,ir,jr,table_result);
+          }
         }
         else // with pt dependence
         {
@@ -701,6 +730,12 @@ void MCnucl::makeTable()
     for(int j=0;j<tmax;j++) dndyTable[iy][j] = new double [tmax];
   }
 
+  dndyTable_app = new double** [binRapidity];
+  for(int iy=0;iy<binRapidity;iy++) {
+    dndyTable_app[iy] = new double* [tmax];
+    for(int j=0;j<tmax;j++) dndyTable_app[iy][j] = new double [tmax];
+  }
+
 int progress_counter = 0, progress_percent = 0, last_update = 0;
 //===========================================================================
   for(int iy=0;iy<binRapidity;iy++) { // loop over rapidity bins
@@ -711,13 +746,25 @@ int progress_counter = 0, progress_percent = 0, last_update = 0;
       for(int j=0;j<tmax;j++) { // loop over targ thickness
         double ta2 = dT*j;
         if(i>0 && j>0) {  // store corresponding dN/dy in lookup table
-          // small-x gluons via kt-factorization
+          // small-x gluons via kt-factorization       
           dndyTable[iy][i][j] = kln->getdNdy(y,ta1,ta2, -1, PT_order); 
+          if(PT_order_mix>0)
+            dndyTable_app[iy][i][j] = kln->getdNdy(y,ta1,ta2, -1, PT_order_app, PT_order_mix); 
           // add large-x partons via DHJ formula if required
           if (val)
+          {
             dndyTable[iy][i][j] += val->getdNdy(y,ta1,ta2);
+            if(PT_order_mix>0)
+              dndyTable_app[iy][i][j] += val->getdNdy(y,ta1,ta2);
+          }
           //cout << ta1 << ", " << ta2 << ", " << dndyTable[iy][i][j] << endl;
-        } else dndyTable[iy][i][j] = 0.0;
+        } 
+        else 
+        { 
+          dndyTable[iy][i][j] = 0.0;
+          if(PT_order_mix>0)
+            dndyTable_app[iy][i][j] = 0.0;
+        }
       progress_counter++;
       progress_percent = (progress_counter*100) / (binRapidity*tmax*tmax);
       if(((progress_percent%10) == 0) && (progress_percent != last_update))
@@ -733,6 +780,8 @@ int progress_counter = 0, progress_percent = 0, last_update = 0;
   cout << "MCnucl::makeTable(): done" << endl << endl;
 
   dumpdNdyTable4Col("data/dNdyTable.dat", dndyTable, 0);
+  if(PT_order_mix>0)
+    dumpdNdyTable4Col("data/dNdyTable_app.dat", dndyTable_app, 0);
 }
 
 
@@ -746,8 +795,8 @@ void MCnucl::makeTable(double ptmin, double dpt, int iPtmax)
 
   dT=10.0/siginNN/overSample;   // elementary thickness step
   if (shape_of_nucleons>=2 && shape_of_nucleons<=9) {  // Gaussian nucleons require finer steps
-    tmax = paraRdr->getVal("tmax_subdivition")*(tmax -1 ) + 1;
-    dT /= paraRdr->getVal("tmax_subdivition");
+    tmax = paraRdr->getVal("tmax_subdivision")*(tmax -1 ) + 1;
+    dT /= paraRdr->getVal("tmax_subdivision");
   }
 
   // range of thicknesses for pt dependent lookup table
@@ -766,7 +815,6 @@ void MCnucl::makeTable(double ptmin, double dpt, int iPtmax)
     }
   }
 
-
 int progress_counter = 0, progress_percent = 0, last_update = 0;
 //===========================================================================
   for(int iy=0;iy<binRapidity;iy++) { // loop over rapidity bins
@@ -957,23 +1005,6 @@ void MCnucl::dumpBinaryTable(char filename[])
   */
 }
 
-void MCnucl::dumpparticipantTable(char filename[])
-{
-  double x,y;
-  ofstream of;
-
-  of.open(filename, std::ios_base::app);
-  for (int idx=0; idx<participant.size(); idx++)
-  {
-    x = participant[idx]->getX();
-    y = participant[idx]->getY();
-    of  << setprecision(3) << setw(10) << x
-        << setprecision(3) << setw(10) << y
-        << endl;
-  }
-  of.close();
-}
-
 int MCnucl::getSpectators()
 {
   int count = 0;
diff --git a/EBE-Node/superMC/MCnucl.h b/EBE-Node/superMC/MCnucl.h
index 6b338cb..039da61 100644
--- a/EBE-Node/superMC/MCnucl.h
+++ b/EBE-Node/superMC/MCnucl.h
@@ -35,13 +35,14 @@ protected:
     int tmax, tmaxPt;
     double dT;
     double ***dndyTable;
+    double ***dndyTable_app; //store particle number table with PT_order_app=1
     double ****dndydptTable;
     double dndy;
     int Maxx,Maxy;
     int isKLN;
     double Xmin, Ymin, Xmax, Ymax;
     double PTinte, PTmax, PTmin, dpt, MaxPT;
-    int    PT_order;
+    int    PT_order, PT_order_mix, PT_order_app; //PT_order_app=1 for calculating total particle number
     double dx,dy;
     double siginNN, siginNN200;
     double rapidity;
@@ -96,7 +97,7 @@ public:
     void setRapidity(double y) {rapidity=y;}
     void generateNucleus(double b, OverLap* proj, OverLap* targ);
     void deleteNucleus();
-    void setDensity(int iy, int ipt); // ipt<0: no dN/dydpt table used
+    void setDensity(int iy, int ipt, int pt_order_mix=0); // ipt<0: no dN/dydpt table used
     void getTA2();
     int  getBinaryCollision();
     int  CentralityCut();
@@ -113,7 +114,6 @@ public:
     int hit(double r);
     static double Angle(const double x,const double y);
 
-    void dumpparticipantTable(char filename[]);
     void dumpBinaryTable(char filename[]);
 
     int getSpectators();
diff --git a/EBE-Node/superMC/MakeDensity.cpp b/EBE-Node/superMC/MakeDensity.cpp
index a87e9c4..7e55709 100644
--- a/EBE-Node/superMC/MakeDensity.cpp
+++ b/EBE-Node/superMC/MakeDensity.cpp
@@ -72,6 +72,7 @@ MakeDensity::MakeDensity(ParameterReader *paraRdr_in)
   dpt = paraRdr->getVal("d_PT");
   MaxPT=(int)((PTmax-PTmin)/dpt+0.1)+1;
   MixedMode = paraRdr->getVal("mixedMode"); 
+  PT_order_mix = paraRdr->getVal("pT_order_mix"); 
 
   //operator option
   Operation = paraRdr->getVal("operation");
@@ -156,7 +157,6 @@ void MakeDensity::generate_profile_ebe_Jet(int nevent)
 {
   // binary profile:
   char file_binary[] = "data/BinaryCollisionTable_event_%d.dat";
-  char file_participant[] = "data/ParticipantTable_event_%d.dat";
 
   // entropy profile:
   char file1_ecc[] = "data/sn_ecc_eccp_%%d_event_%d.dat";
@@ -220,8 +220,6 @@ void MakeDensity::generate_profile_ebe_Jet(int nevent)
       }
     }
     Npart = mc->getNpart1()+mc->getNpart2();
-    sprintf(buffer, file_participant, event);
-    mc->dumpparticipantTable(buffer); // for collision profile
     int Spectator = mc->getSpectators();
     mc->dumpSpectatorsTable(event);
     sprintf(buffer, file_binary, event);
@@ -309,7 +307,9 @@ void MakeDensity::generate_profile_ebe(int nevent)
   char file1_4col[] = "data/sd_event_%d_4col.dat";
   char file1_block[] = "data/sd_event_%d_block.dat";
   char file1_5col[] = "data/sd_event_%d_5col.dat";
-  char file1_ptCol[] = "data/sd_event_%d_ptCol.dat";    
+  char file1_ptCol[] = "data/sd_event_%d_ptCol.dat";   
+  char file1_4col_app[] = "data/sd_event_%d_4col_particle.dat"; 
+  char file1_block_app[] = "data/sd_event_%d_block_particle.dat";   
   double *** dens1  = new double** [binRapidity];
   for(int iy=0;iy<binRapidity;iy++) {
     dens1[iy] =  new double* [Maxx]();
@@ -319,6 +319,15 @@ void MakeDensity::generate_profile_ebe(int nevent)
     }
   }
 
+  double *** dens1_app  = new double** [binRapidity];
+  for(int iy=0;iy<binRapidity;iy++) {
+    dens1_app[iy] =  new double* [Maxx]();
+    for(int i=0;i<Maxx;i++) {
+        dens1_app[iy][i] = new double[Maxy]();
+        for (int j=0;j<Maxy;j++) dens1_app[iy][i][j]=0;
+    }
+  }
+
   double **** dens1pt  = new double*** [binRapidity];
     for(int iy=0;iy<binRapidity;iy++) {
     dens1pt[iy] =  new double** [Maxx]();
@@ -336,6 +345,8 @@ void MakeDensity::generate_profile_ebe(int nevent)
   char file2_block[] = "data/ed_event_%d_block.dat";
   char file2_5col[] = "data/ed_event_%d_5col.dat";
   char file2_ptCol[] = "data/ed_event_%d_ptCol.dat";  
+  char file2_4col_app[] = "data/ed_event_%d_4col_particle.dat";
+  char file2_block_app[] = "data/ed_event_%d_block_particle.dat";  
   double *** dens2  = new double** [binRapidity];
   for(int iy=0;iy<binRapidity;iy++) {
     dens2[iy] =  new double* [Maxx]();
@@ -344,6 +355,15 @@ void MakeDensity::generate_profile_ebe(int nevent)
         for (int j=0;j<Maxy;j++) dens2[iy][i][j]=0;
     }
   }
+  double *** dens2_app  = new double** [binRapidity];
+  for(int iy=0;iy<binRapidity;iy++) {
+    dens2_app[iy] =  new double* [Maxx]();
+    for(int i=0;i<Maxx;i++) {
+        dens2_app[iy][i] = new double[Maxy];
+        for (int j=0;j<Maxy;j++) dens2_app[iy][i][j]=0;
+    }
+  }
+
   double **** dens2pt  = new double*** [binRapidity];
     for(int iy=0;iy<binRapidity;iy++) {
     dens2pt[iy] =  new double** [Maxx]();
@@ -407,7 +427,8 @@ void MakeDensity::generate_profile_ebe(int nevent)
     bool cutdSdypassFlag = true;
     if(PTinte>0)
     {
-      for(int iy=0;iy<binRapidity;iy++) {
+      for(int iy=0;iy<binRapidity;iy++) 
+      {
         mc->setDensity(iy, -1);
         // cut total entropy
         if(iy == 0 && cutdSdy == 1)
@@ -437,7 +458,7 @@ void MakeDensity::generate_profile_ebe(int nevent)
         // output energy profile
         if (use_ed)
         {
-          setEd(dens2, iy); // includes factor multiplication
+          setEd(dens2_app, iy); // includes factor multiplication
           if (use_4col)
             {
               sprintf(buffer,file2_4col,event);
@@ -450,14 +471,62 @@ void MakeDensity::generate_profile_ebe(int nevent)
             }
         }
       } // <-> for(int iy=0;iy<binRapidity;iy++)
-      /* comment the following lines to let dNdyTable and dNdydPtTable use the same configuration*/   
-      if(MixedMode<=0)   //keep the current configuration if need pT-unintegrated table
+    } //    if(PTinte>0)
+
+    if(PTinte>0 && PT_order_mix>0)
+    {
+      for(int iy=0;iy<binRapidity;iy++) 
       {
-        mc->deleteNucleus();
-        if(cutdSdypassFlag)
-          event++;
-      }
+        mc->setDensity(iy, -1, PT_order_mix);
+        // cut total entropy
+        if(iy == 0 && cutdSdy == 1)
+        {
+           double totaldSdy = gettotaldSdy(iy);
+           if(totaldSdy < cutdSdy_lowerBound || totaldSdy > cutdSdy_upperBound)
+           {
+              cutdSdypassFlag = false;
+              break;
+           }
+        }
+        // output entropy profile
+        if (use_sd)
+        {
+          setSd(dens1_app, iy); // includes factor multiplication
+          if (use_4col)
+            {
+              sprintf(buffer,file1_4col_app,event);
+              dumpDensity4Col(buffer, dens1_app, iy);
+            }
+          if (use_block)
+            {
+              sprintf(buffer,file1_block_app,event);
+              dumpDensityBlock(buffer, dens1_app, iy);
+            }
+        }
+        // output energy profile
+        if (use_ed)
+        {
+          setEd(dens2_app, iy); // includes factor multiplication
+          if (use_4col)
+            {
+              sprintf(buffer,file2_4col_app,event);
+              dumpDensity4Col(buffer, dens2_app, iy);
+            }
+          if (use_block)
+            {
+              sprintf(buffer,file2_block_app,event);
+              dumpDensityBlock(buffer, dens2_app, iy);
+            }
+        }
+      } // <-> for(int iy=0;iy<binRapidity;iy++)
   }// <-> if(PTinte>0) 
+  /* comment the following lines to let dNdyTable and dNdydPtTable use the same configuration*/   
+  if(PTinte>0 && MixedMode<=0)   //keep the current configuration if need pT-unintegrated table
+  {
+    mc->deleteNucleus();
+    if(cutdSdypassFlag)
+      event++;
+  }
 
   if((PTinte<0 or MixedMode>0) and cutdSdypassFlag)
   //calculate pT unintegrated particle distribution
@@ -514,11 +583,23 @@ void MakeDensity::generate_profile_ebe(int nevent)
   delete [] dens1;
 
   for(int iy=0;iy<binRapidity;iy++) {
+    for(int i=0;i<Maxx;i++) delete [] dens1_app[iy][i];
+    delete [] dens1_app[iy];
+  }
+  delete [] dens1_app;
+
+  for(int iy=0;iy<binRapidity;iy++) {
     for(int i=0;i<Maxx;i++) delete [] dens2[iy][i];
     delete [] dens2[iy];
   }
   delete [] dens2;
 
+  for(int iy=0;iy<binRapidity;iy++) {
+    for(int i=0;i<Maxx;i++) delete [] dens2_app[iy][i];
+    delete [] dens2_app[iy];
+  }
+  delete [] dens2_app;
+
 //clean up pt-dependence densities
   for(int iy=0;iy<binRapidity;iy++) {
     for(int i=0;i<Maxx;i++) {
@@ -565,6 +646,8 @@ void MakeDensity::generate_profile_average(int nevent)
   // entropy profile:
   char file1_4col[] = "data/sdAvg_order_%d_4col.dat";
   char file1_block[] = "data/sdAvg_order_%d_block.dat";
+  char file1_4col_app[] = "data/sdAvg_order_%d_4col_particle.dat";
+  char file1_block_app[] = "data/sdAvg_order_%d_block_particle.dat";
   double **** dens1  = new double*** [number_of_orders];
   for(int iorder=0; iorder<number_of_orders; iorder++) // iorder starts from 0
   {
@@ -577,6 +660,20 @@ void MakeDensity::generate_profile_average(int nevent)
       }
     }
   }
+
+  double **** dens1_app  = new double*** [number_of_orders];
+  for(int iorder=0; iorder<number_of_orders; iorder++) // iorder starts from 0
+  {
+    dens1_app[iorder] = new double** [binRapidity];
+    for(int iy=0;iy<binRapidity;iy++) {
+      dens1_app[iorder][iy] =  new double* [Maxx]();
+      for(int i=0;i<Maxx;i++) {
+          dens1_app[iorder][iy][i] = new double[Maxy]();
+          for (int j=0;j<Maxy;j++) dens1_app[iorder][iy][i][j]=0;
+      }
+    }
+  }
+
   double ***** dens1pt = new double **** [number_of_orders];
   //entropy density for pt-unintegrated case: dens1pt(iorder, iy, x, y, ipt)
   for(int iorder=0; iorder<number_of_orders; iorder++) // iorder starts from 0
@@ -598,6 +695,8 @@ void MakeDensity::generate_profile_average(int nevent)
   // energy profile:
   char file2_4col[] = "data/edAvg_order_%d_4col.dat";
   char file2_block[] = "data/edAvg_order_%d_block.dat";
+  char file2_4col_app[] = "data/edAvg_order_%d_4col_particle.dat";
+  char file2_block_app[] = "data/edAvg_order_%d_block_particle.dat";  
   double **** dens2  = new double*** [number_of_orders];
   char file2_5col[] = "data/edAvg_order_%d_5col.dat";
   for(int iorder=0; iorder<number_of_orders; iorder++) // iorder starts from 0
@@ -611,6 +710,19 @@ void MakeDensity::generate_profile_average(int nevent)
       }
     }
   }
+
+  double **** dens2_app  = new double*** [number_of_orders];
+  for(int iorder=0; iorder<number_of_orders; iorder++) // iorder starts from 0
+  {
+    dens2_app[iorder] = new double** [binRapidity];
+    for(int iy=0;iy<binRapidity;iy++) {
+      dens2_app[iorder][iy] =  new double* [Maxx]();
+      for(int i=0;i<Maxx;i++) {
+          dens2_app[iorder][iy][i] = new double[Maxy]();
+          for (int j=0;j<Maxy;j++) dens2_app[iorder][iy][i][j]=0;
+      }
+    }
+  } 
   //energy density for pt-unintegrated: dens2pt(iorder, iy, x, y, ipt)
   double *****dens2pt = new double**** [number_of_orders];
   for(int iorder=0; iorder<number_of_orders; iorder++) // iorder starts from 0
@@ -637,6 +749,15 @@ void MakeDensity::generate_profile_average(int nevent)
         for (int j=0;j<Maxy;j++) dens_tmp[iy][i][j]=0;
     }
   }
+
+  double *** dens_tmp_app  = new double** [binRapidity];
+  for(int iy=0;iy<binRapidity;iy++) {
+    dens_tmp_app[iy] =  new double* [Maxx]();
+    for(int i=0;i<Maxx;i++) {
+        dens_tmp_app[iy][i] = new double[Maxy]();
+        for (int j=0;j<Maxy;j++) dens_tmp_app[iy][i][j]=0;
+    }
+  }
   // temporary table which stores pt-unintegrated energy or entropy density
   double ****  dens_tmp_pt  = new double*** [binRapidity];
   for(int iy=0;iy<binRapidity;iy++) {
@@ -690,6 +811,8 @@ void MakeDensity::generate_profile_average(int nevent)
   long auto_backup_after_number_of_averaging = paraRdr->getVal("backup_number")-1;
   ArraySaver<double> dens1_saver("backup/dens1.dat", dens1, 4, Maxy, Maxx, binRapidity, number_of_orders);
   ArraySaver<double> dens2_saver("backup/dens2.dat", dens2, 4, Maxy, Maxx, binRapidity, number_of_orders);
+  ArraySaver<double> dens1_app_saver("backup/dens1_particle.dat", dens1_app, 4, Maxy, Maxx, binRapidity, number_of_orders);
+  ArraySaver<double> dens2_app_saver("backup/dens2_particle.dat", dens2_app, 4, Maxy, Maxx, binRapidity, number_of_orders);  
   long backup_counter = auto_backup_after_number_of_averaging;
   ArraySaver<long> event_index_saver("backup/event_index.dat", &event, 1, 1);
 
@@ -741,7 +864,7 @@ void MakeDensity::generate_profile_average(int nevent)
           // average entropy profile
           if (use_sd)
           {
-              mc->rotateGrid(iy, order); // rotate grid according to gluon density <-> according to entropy density. Note that different rapidity slices are rotated separately, and this does not quite make sense.
+              mc->rotateGrid(iy, order); // line*A*: rotate grid according to gluon density <-> according to entropy density. Note that different rapidity slices are rotated separately, and this does not quite make sense.
               mc->getTA2();
               mc->setDensity(iy, -1); // now it's after rotation
               setSd(dens_tmp, iy); // includes factor multiplication
@@ -791,6 +914,76 @@ void MakeDensity::generate_profile_average(int nevent)
         } // <-> for(int iy=0;iy<binRapidity;iy++)
       } //<-> if PTinte<0
 
+      if(PTinte > 0 && PT_order_mix>0)  // for integrated-pt, and mix mode
+      {
+        for(int iy=0;iy<binRapidity;iy++) {
+          // nucleon positions have been changed in the line*A*, the density we have on next line share the same 
+          // nucleon profile (or TA2()) as the rotated one in the above section. This is equivalent to one more rotation.
+          // This does not matter for averging over a large amount of events.
+          mc->setDensity(iy, -1, PT_order_mix);
+          // cut total entropy density
+          if(iy == 0 && cutdSdy == 1)
+          {
+             double totaldSdy = gettotaldSdy(iy);
+             if(totaldSdy < cutdSdy_lowerBound || totaldSdy > cutdSdy_upperBound)
+             {
+                cutdSdypassFlag = false;
+                break;
+             }
+          }
+          // average entropy profile
+          if (use_sd)
+          {
+              mc->rotateGrid(iy, order); // rotate grid according to gluon density <-> according to entropy density. Note that different rapidity slices are rotated separately, and this does not quite make sense.
+              mc->getTA2();
+              mc->setDensity(iy, -1, PT_order_mix); // now it's after rotation
+              setSd(dens_tmp_app, iy); // includes factor multiplication
+              // averaging --- entropy density:
+              for(int i=0;i<Maxx;i++)
+              for(int j=0;j<Maxy;j++)
+              {
+                  dens1_app[iorder][iy][i][j] = (dens1_app[iorder][iy][i][j]*(event-1) + dens_tmp_app[iy][i][j])/(double)(event); // event = number of succeeded events
+              }
+              // dumping TA*TB
+              if (output_TATB) {
+                  for(int i=0;i<Maxx;i++)
+                  for(int j=0;j<Maxy;j++)
+                  {
+                      TATB_Sd[iorder][iy][i][j] = (TATB_Sd[iorder][iy][i][j]*(event-1) + mc->getTA1(i,j)*mc->getTA2(i,j))/(double)(event); // event = number of succeeded events
+                  }
+              }
+          }
+          // average energy profile
+          if (use_ed)
+          {
+              setEd(dens_tmp_app, iy); // get energy density first
+              // write energy density "back" to the "gluon density" matrix in MCnucl
+              for(int i=0;i<Maxx;i++)
+              for(int j=0;j<Maxy;j++) {
+                  mc->setRho(iy,i,j,dens_tmp_app[iy][i][j]);
+              }
+              mc->rotateGrid(iy, order); // rotate grid according to energy density. Note that different rapidity slices are rotated separately, and this does not quite make sense.
+              mc->getTA2();
+              mc->setDensity(iy, -1, PT_order_mix); // now it's after rotation
+              setEd(dens_tmp_app, iy); // includes factor multiplication
+              // averaging --- entropy density:
+              for(int i=0;i<Maxx;i++)
+              for(int j=0;j<Maxy;j++)
+              {
+                  dens2_app[iorder][iy][i][j] = (dens2_app[iorder][iy][i][j]*(event-1) + dens_tmp_app[iy][i][j])/(double)(event); // event = number of succeeded events
+              }
+              // dumping TA*TB
+              if (output_TATB) {
+                  for(int i=0;i<Maxx;i++)
+                  for(int j=0;j<Maxy;j++)
+                  {
+                      TATB_Ed[iorder][iy][i][j] = (TATB_Ed[iorder][iy][i][j]*(event-1) + mc->getTA1(i,j)*mc->getTA2(i,j))/(double)(event); // event = number of succeeded events
+                  }
+              }
+          } // <->  if (use_ed)
+        } // <-> for(int iy=0;iy<binRapidity;iy++)
+      } //<-> if PTinte<0 and PT_order_mix>0
+
       if(PTinte < 0)//pt is not integrated out
       {
         for(int iy=0;iy<binRapidity;iy++) 
@@ -865,6 +1058,11 @@ void MakeDensity::generate_profile_average(int nevent)
     {
       if (use_sd) dens1_saver.snapshot();
       if (use_ed) dens2_saver.snapshot();
+      if(PT_order_mix>0)
+      {
+        if (use_sd) dens1_app_saver.snapshot();
+        if (use_ed) dens2_app_saver.snapshot();        
+      }
       event_index_saver.snapshot();
       backup_counter = auto_backup_after_number_of_averaging;
     }
@@ -889,11 +1087,21 @@ void MakeDensity::generate_profile_average(int nevent)
             {
               sprintf(buffer, file1_4col, order);
               dumpDensity4Col(buffer, dens1[iorder], iy);
+              if(PT_order_mix>0)
+              {
+                sprintf(buffer, file1_4col_app, order);
+                dumpDensity4Col(buffer, dens1_app[iorder], iy);                
+              }
             }
             if (use_block)
             {
               sprintf(buffer, file1_block, order);
               dumpDensityBlock(buffer, dens1[iorder], iy);
+              if(PT_order_mix)
+              {
+                sprintf(buffer, file1_block_app, order);
+                dumpDensityBlock(buffer, dens1_app[iorder], iy);
+              }
             }
             if (use_5col)
             {
@@ -907,11 +1115,21 @@ void MakeDensity::generate_profile_average(int nevent)
             {
               sprintf(buffer, file2_4col, order);
               dumpDensity4Col(buffer, dens2[iorder], iy);
+              if(PT_order_mix>0)
+              {
+                sprintf(buffer, file2_4col_app, order);
+                dumpDensity4Col(buffer, dens2_app[iorder], iy);                
+              }
             }
             if (use_block)
             {
               sprintf(buffer, file2_block, order);
               dumpDensityBlock(buffer, dens2[iorder], iy);
+              if(PT_order_mix>0)
+              {
+                sprintf(buffer, file2_block_app, order);
+                dumpDensityBlock(buffer, dens2_app[iorder], iy);
+              }
             }
            if (use_5col)
             {
@@ -970,6 +1188,24 @@ void MakeDensity::generate_profile_average(int nevent)
   }
   delete [] dens2;
 
+  for(int iorder=0; iorder<number_of_orders; iorder++) {
+    for(int iy=0;iy<binRapidity;iy++) {
+      for(int i=0;i<Maxx;i++) delete [] dens1_app[iorder][iy][i];
+      delete [] dens1_app[iorder][iy];
+    }
+    delete [] dens1_app[iorder];
+  }
+  delete [] dens1_app;
+
+  for(int iorder=0; iorder<number_of_orders; iorder++) {
+    for(int iy=0;iy<binRapidity;iy++) {
+      for(int i=0;i<Maxx;i++) delete [] dens2_app[iorder][iy][i];
+      delete [] dens2_app[iorder][iy];
+    }
+    delete [] dens2_app[iorder];
+  }
+  delete [] dens2_app;
+
 
   for(int iy=0;iy<binRapidity;iy++) {
     for(int i=0;i<Maxx;i++) {
@@ -1005,6 +1241,12 @@ void MakeDensity::generate_profile_average(int nevent)
   }
   delete [] dens_tmp;
 
+  for(int iy=0;iy<binRapidity;iy++) {
+    for(int i=0;i<Maxx;i++) delete [] dens_tmp_app[iy][i];
+    delete [] dens_tmp_app[iy];
+  }
+  delete [] dens_tmp_app;
+
   for(int iorder=0; iorder<number_of_orders; iorder++) {
     for(int iy=0;iy<binRapidity;iy++) {
       for(int i=0;i<Maxx;i++) delete [] TATB_Sd[iorder][iy][i];
diff --git a/EBE-Node/superMC/MakeDensity.h b/EBE-Node/superMC/MakeDensity.h
index 0b54b54..ff8f908 100644
--- a/EBE-Node/superMC/MakeDensity.h
+++ b/EBE-Node/superMC/MakeDensity.h
@@ -37,6 +37,7 @@ protected:
   double Alpha;
   double finalFactor;
   double PTinte, PTmax, PTmin, dpt, MixedMode;
+  int PT_order_mix;
   EOS eos;
   int Operation;
 
diff --git a/EBE-Node/superMC/parameters.dat b/EBE-Node/superMC/parameters.dat
index 01c12e7..a2395e8 100644
--- a/EBE-Node/superMC/parameters.dat
+++ b/EBE-Node/superMC/parameters.dat
@@ -14,7 +14,7 @@ sub_model = 1             # CGC-> (7) KLN model model described in
                           # BC midpoints: Heinz, Qiu and Moreland.
 
 # KLN Sub-Model Optns
-lambda = 0.288            # Lambda in the def. of (Qs)^2 which is prop. to (x0/x)^lambda 
+lambda = 0.138            # Lambda in the def. of (Qs)^2 which is prop. to (x0/x)^lambda 
 Et = 0                    # (0) Output gluon density; (1) Output energy density.
 lgX = 0                   # (0) Ignore large-x effects; (1) Include large-x effects.
 tmax = 51                 # Used to generate the T_A, T_B double integral lookup table. 
@@ -47,10 +47,10 @@ gauss_nucl_width = 0.5    # 4-> User specified width for Gaussian nucleons
 
 # Collision Optns
 ecm = 2760                # Beam Energy sqrt(s) in GeV
-bmin = 0                  # Minimum sampled impact parameter
-bmax = 20.0                  # Maximum sampled impact parameter
-Npmin = 1                 # Minimum participant nucleon cut
-Npmax = 1000              # Maximum participant nucleon cut
+bmin = 3.8                  # Minimum sampled impact parameter
+bmax = 7.7                  # Maximum sampled impact parameter
+Npmin = 223                 # Minimum participant nucleon cut
+Npmax = 306                 # Maximum participant nucleon cut
 
 cutdSdy = 0               # cut centrality with additional requirements on total entropy density (without normalization factor)
 cutdSdy_lowerBound =  551.864          # lower bound of the allowed total entropy density
@@ -58,13 +58,13 @@ cutdSdy_upperBound =  10000000.0       # upper bound of the allowed total entrop
 
 
 # Monte Carlo Optns
-nev = 1               # Number of collision events simulated
+nev = 10000                  # Number of collision events simulated
 randomSeed = -1           # If randomSeed < 0 then CPU time is used to seed
-backup_number = 10000     # Backs up the averaged profile every "n" events. 0 means 
+backup_number = 10001     # Backs up the averaged profile every "n" events. 0 means 
                           # every step. Use a neg number to turn it off
 
 # Operation Mode Optns
-operation = 1             # (1) Generate n transverse density profiles for n events 
+operation = 3             # (1) Generate n transverse density profiles for n events 
                           # (input for event-by-event hydro)
                           # (2) Generate n transverse density profiles for n events 
                           # and their corresponding binary collision table and eccentricities
@@ -75,10 +75,10 @@ operation = 1             # (1) Generate n transverse density profiles for n eve
                           # the data in a table
 
 # Operation Mode Sub-Optns
-finalFactor = 41.6           # 1,3,9-> Scale the final density profile by this factor
+finalFactor = 1           # 1,3,9-> Scale the final density profile by this factor
 average_from_order = 2    # 3-> Generate rotated and averaged profiles for each order 
                           # beginning with this order
-average_to_order = 2      # 3-> Generate rotated and averaged profiles for each order 
+average_to_order = 5      # 3-> Generate rotated and averaged profiles for each order 
                                  # ending with this order
 ecc_from_order = 1        # 9-> Calculate the eccentricity of the profile for each order 
                                   # beginning with this order
@@ -90,7 +90,7 @@ ecc_to_order = 9          # 9-> Calculate the eccentricity of the profile for ea
 use_sd = 1                # Boolean toggle to print the raw CGC and Glauber output 
                           # (CGC: gluon density; Glb: (1-alpha)/2*WN + alpha*BC) 
 use_ed = 0                # Boolean toggle to covert the entropy profile using the 
-                          # EOS and print the energy profile (do not use if Et=1)
+                          # EOS and print the energy profile (do not use if Et=1). This option does not support pT_order=2 or pT_order_mix=1 mode.
 use_4col = 0              # Boolean toggle to print 4 column format (rap, x, y, data)
 use_block = 1             # Boolean toggle to print matrix format (good for matlab)
 use_5col = 0              # Boolean toggle to print 5 column format (rap, x, y, pt, data)
@@ -98,18 +98,19 @@ use_ptCol = 0             # Boolean toggle to print pt-unintegrated table, worki
 
 
 # P_T spectura optns
-PT_Flag = 1               # Boolean toggle to output PT-integrated gluon density; if < 0, output pT unintegrated particle spectra; PT_Flag can not take 0
+PT_Flag = 1               # Boolena toogle to output PT-integrated gluon density; if < 0, output pT unintegrated particle spectra; PT_Flag can not take 0
 mixedMode = 0             # if > 0, calculate both the pT-unintegrated particle spectra and pT-integrated particle density
                           # All the following parameters in this block will only be effective when pT_Flag < 0 and mixedMode > 0
 PT_Min = 0.1              # Minimum value of PT
-PT_Max = 2                # Maximum value of PT
+PT_Max = 12                # Maximum value of PT
 PT_order = 2              # =1 output the usual entropy/energy density profile; =2 output pT^2 instead of pT in integrand in KLN
+pT_order_mix = 1           # =1 for also calculating PT_order = 1 along with pT_order = 2 to get total particle number.
 d_PT = 0.1                # Step size of PT in GeV
 
 
 # Grid Optns
-maxx = 13                 # Max grid value along x direction in fm
-maxy = 13                 # Max grid value along y direction in fm 
+maxx = 20                 # Max grid value along x direction in fm
+maxy = 20                 # Max grid value along y direction in fm 
 dx = 0.1                  # Step size along x direction in fm
 dy = 0.1                  # Step size along y direction in fm
 ny = 1                    # Number of rapidity bins (do not set to zero)
@@ -117,7 +118,7 @@ ymax = 0                  # Maximum rapidity value (symmetric -ymax to ymax)
 
 
 # CC fluctions
-cc_fluctuation_model = 6  # 0: no fluctuations; 1: NBD constant k; 2: NBD use TA TB to determine n; 6: MCGlb: Gamma distribution for each collision and wounded nucleon
+cc_fluctuation_model = 0  # 0: no fluctuations; 1: NBD constant k; 2: NBD use TA TB to determine n; 6: MCGlb: Gamma distribution for each collision and wounded nucleon
 cc_fluctuation_k = 0.75   # constant k; used when cc_fluctuation_model is set to 1.
 cc_fluctuation_Gamma_theta = 0.9175    # the scale parameter for Gamma distribution theta = 0.9175 (from KNO scaling)
 
diff --git a/EBE-Node/superMC/s95p-PCE/EOS_converted.dat b/EBE-Node/superMC/s95p-PCE/EOS_converted.dat
old mode 100755
new mode 100644
